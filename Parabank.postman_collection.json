{
	"info": {
		"_postman_id": "5b78d433-08a6-445b-b6ad-2d62f5d777e8",
		"name": "Parabank",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3513773"
	},
	"item": [
		{
			"name": "CT01 - Login",
			"item": [
				{
					"name": "1 - Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/ ",
									"",
									"login.status_code(200, \"OK\", 500)",
									"",
									"/*Validate Response Header*/ ",
									"",
									"login.header()",
									"",
									"/*Validate Response Body*/ ",
									"",
									"login.body(pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "john",
									"type": "text"
								},
								{
									"key": "password",
									"value": "demo",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{pbk}}/login.htm",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"login.htm"
							]
						},
						"description": "Generated from cURL: curl -X POST \"https://parabank.parasoft.com/parabank/login.htm\" \\\r\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\r\n  -c cookies.txt \\\r\n  -d \"username=john&password=demo\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** possuo conta no Parabank\n\n**Quando** faço uma requisição para de login com credenciais válidas\n\n**Então** devo logar com sucesso"
		},
		{
			"name": "CT02 - Abertura de Conta",
			"item": [
				{
					"name": "2 - Abertura de Conta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/ ",
									"",
									"account.status_code(200, \"OK\", 400)",
									"",
									"/*Validate Response Header*/ ",
									"",
									"account.header()",
									"",
									"/*Validate Response Body*/ ",
									"",
									"account.body(pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{pbk}}/services/bank/createAccount?customerId={{customerId}}&newAccountType=0&fromAccountId={{accountId}}",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"services",
								"bank",
								"createAccount"
							],
							"query": [
								{
									"key": "customerId",
									"value": "{{customerId}}"
								},
								{
									"key": "newAccountType",
									"value": "0"
								},
								{
									"key": "fromAccountId",
									"value": "{{accountId}}"
								}
							]
						},
						"description": "Generated from cURL: curl -X POST \"https://parabank.parasoft.com/parabank/services/bank/createAccount?customerId=12212&newAccountType=1&fromAccountId=13344\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** quero abrir uma conta no Parabank\n\n**Quando** faço uma requisição para abertura de conta com dados válidos\n\n**Então** a conta deve ser aberta com suceso"
		},
		{
			"name": "CT03 - Consutar contas do cliente",
			"item": [
				{
					"name": "3 - Consultar Contas do Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/ ",
									"",
									"account_viewer.status_code(200, \"OK\", 1500)",
									"",
									"/*Validate Response Header*/ ",
									"",
									"account_viewer.header()",
									"",
									"/*Validate Response Body*/ ",
									"",
									"account_viewer.body(pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{pbk}}/services/bank/customers/{{customerId}}/accounts",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"services",
								"bank",
								"customers",
								"{{customerId}}",
								"accounts"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://parabank.parasoft.com/parabank/services/bank/customers/12212/accounts\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** possuo conta no Parabank\n\n**Quando** faço uma requisição para consultar o meu saldo de conta\n\n**Então** devo visualizar o saldo em conta"
		},
		{
			"name": "CT04 - Consultar informações do cliente",
			"item": [
				{
					"name": "4 - Consultar Informações do Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/",
									"",
									"customer_info.status_code(200, \"OK\", 1500)",
									"",
									"/*Validate Response Header*/",
									"",
									"customer_info.header()",
									"",
									"/*Validate Response Body*/",
									"",
									"customer_info.body(pm.response.text())",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{pbk}}/services/bank/customers/{{customerId}}",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"services",
								"bank",
								"customers",
								"{{customerId}}"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://parabank.parasoft.com/parabank/services/bank/customers/12212\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** possuo conta no Parabank\n\n**Quando** faço uma requisição para consultas os meus dados pessoais\n\n**Então** devo visualizar as informações corretamente"
		},
		{
			"name": "CT05 - Transferência entre contas",
			"item": [
				{
					"name": "5 - Transferência entre contas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/ ",
									"",
									"transfer.status_code(200, \"OK\", 1000)",
									"",
									"/*Validate Response Header*/ ",
									"",
									"transfer.header()",
									"",
									"/*Validate Response Body*/ ",
									"",
									"transfer.body(pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{pbk}}/services/bank/transfer?fromAccountId={{accountId_2}}&toAccountId={{accountId}}&amount=58",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"services",
								"bank",
								"transfer"
							],
							"query": [
								{
									"key": "fromAccountId",
									"value": "{{accountId_2}}"
								},
								{
									"key": "toAccountId",
									"value": "{{accountId}}"
								},
								{
									"key": "amount",
									"value": "58"
								}
							]
						},
						"description": "Generated from cURL: curl -X POST \"https://parabank.parasoft.com/parabank/services/bank/transfer?fromAccountId=13344&toAccountId=14454&amount=50\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** possuo conta no Parabank\n\n**Quando** faço uma requisição para transferir um valor para outra conta\n\n**Então** a transação deve ser realizada com sucesso"
		},
		{
			"name": "CT06 - Consultar extrato",
			"item": [
				{
					"name": "6 - Consultar extrato",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* author: Juliana Estevao",
									"*/",
									"",
									"/*Validate Response Status Code*/",
									"",
									"transaction_info.status_code(200, \"OK\", 1500)",
									"",
									"/*Validate Response Header*/",
									"",
									"transaction_info.header()",
									"",
									"/*Validate Response Body*/",
									"",
									"transaction_info.body(pm.response.text())"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{pbk}}/services/bank/accounts/{{accountId}}/transactions",
							"host": [
								"{{pbk}}"
							],
							"path": [
								"services",
								"bank",
								"accounts",
								"{{accountId}}",
								"transactions"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://parabank.parasoft.com/parabank/services/bank/accounts/13344/transactions\"\r\n"
					},
					"response": []
				}
			],
			"description": "**Dado** **que** possuo conta no Parabank\n\n**Quando** faço uma requisição para consutar o extrato de conta\n\n**Então** devo visualizar o extrato com sucesso"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Inicializa flag no escopo da execução",
					"pm.variables.set(\"skipTests\", false);",
					"",
					"// 00.02 - Verifica se o código de status é < 400",
					"pm.test(\"00.00 - Não deve retornar erro 4xx ou 5xx\", function () {",
					"    const isError = pm.response.code >= 400;",
					"    if (isError) {",
					"        pm.variables.set(\"skipTests\", true);",
					"    }",
					"    pm.expect(isError, `Código HTTP inesperado: ${pm.response.code}`).to.be.false;",
					"});",
					"",
					"",
					"login = {",
					"",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'text/html'\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');",
					"        });",
					"",
					"        pm.test(\"02.03 - Response Header must content-language  = 'en-US' \", function () {",
					"            pm.expect(pm.response.headers.get('content-language')).to.eql('en-US');",
					"        });",
					"",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        // Verifica se o corpo não está nulo",
					"        pm.test(\"03.01 - Response Body must not be null\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"        });",
					"",
					"        // Verifica se contém o título correto da página",
					"        pm.test(\"03.02 - Title da página deve conter 'Accounts Overview'\", function () {",
					"            pm.expect(responseBody).to.include(\"<title>ParaBank | Accounts Overview</title>\");",
					"        });",
					"",
					"        // Verifica se o menu lateral possui o nome do usuário logado",
					"        pm.test(\"03.03 - Deve conter Welcome John Smith\", function () {",
					"            pm.expect(responseBody).to.match(/<b>\\s*Welcome\\s*<\\/b>\\s*John Smith/i);",
					"        });",
					"",
					"        // Verifica se a tabela com contas está presente",
					"        pm.test(\"03.04 - Deve conter tabela de contas com cabeçalhos corretos\", function () {",
					"            pm.expect(responseBody).to.include(\"<th>Account</th>\");",
					"            pm.expect(responseBody).to.include(\"<th>Balance*</th>\");",
					"            pm.expect(responseBody).to.include(\"<th>Available Amount</th>\");",
					"        });",
					"",
					"        // Verifica se há a lista de serviços no painel esquerdo",
					"        pm.test(\"03.05 - Deve conter opção 'Transfer Funds' no menu lateral\", function () {",
					"            pm.expect(responseBody).to.include(\">Transfer Funds<\");",
					"        });",
					"",
					"        // Verifica se há o footer com copyright",
					"        pm.test(\"03.06 - Deve conter copyright\", function () {",
					"            pm.expect(responseBody).to.match(/&copy;\\s*Parasoft\\. All rights reserved\\./i);",
					"        });",
					"",
					"        // Verifica se contém o script de chamada AJAX",
					"        pm.test(\"03.07 - Deve conter chamada AJAX para /customers/12212/accounts\", function () {",
					"            pm.expect(responseBody).to.include('services_proxy/bank/customers/\" + 12212 + \"/accounts');",
					"        });",
					"    }",
					"",
					"};",
					"",
					"account = {",
					"",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'application/xml' '\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"        });",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"03.01 - Response Body must not be null\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"        });",
					"",
					"        // Converte XML em objeto JSON",
					"        const responseJson = xml2Json(responseBody);",
					"",
					"        // Verifica se o nó principal é <account>",
					"        pm.test(\"03.02 - Deve conter o nó <account>\", function () {",
					"            pm.expect(responseJson).to.have.property('account');",
					"        });",
					"",
					"        // Valida os campos dentro de <account>",
					"        pm.test(\"03.03 - Deve conter id como número\", function () {",
					"            const id = parseInt(responseJson.account.id, 10);",
					"            pm.expect(id).to.be.a('number');",
					"        });",
					"",
					"        pm.test(\"03.04 - Deve conter customerId = 12212\", function () {",
					"            pm.expect(responseJson.account.customerId).to.eql(\"12212\");",
					"        });",
					"",
					"        pm.test(\"03.05 - Deve conter type = CHECKING\", function () {",
					"            pm.expect(responseJson.account.type).to.eql(\"CHECKING\");",
					"        });",
					"",
					"        pm.test(\"03.06 - Deve conter balance = 0\", function () {",
					"            pm.expect(responseJson.account.balance).to.eql(\"0\");",
					"        });",
					"    }",
					"",
					"};",
					"",
					"transfer = {",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'application/xml'\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"        });",
					"",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        // 1. Verifica se o corpo não está nulo ou vazio",
					"        pm.test(\"03.01 - Response Body must not be null\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"            pm.expect(responseBody.trim().length).to.be.above(0);",
					"        });",
					"",
					"        // 2. Verifica se contém a mensagem base de sucesso",
					"        pm.test(\"03.02 - Deve conter mensagem de transferência bem-sucedida\", function () {",
					"            pm.expect(responseBody).to.include(\"Successfully transferred\");",
					"        });",
					"",
					"        // 3. Verifica se há valor numérico com símbolo de dólar",
					"        pm.test(\"03.03 - Deve conter valor com $\", function () {",
					"            pm.expect(responseBody).to.match(/\\$\\d+/);",
					"        });",
					"",
					"        // 4. Verifica se contém dois IDs de conta numérica",
					"        pm.test(\"03.04 - Deve conter dois números de conta no formato '#xxxxx'\", function () {",
					"            const match = responseBody.match(/#\\d+/g);",
					"            pm.expect(match).to.be.an('array').that.has.lengthOf(2);",
					"        });",
					"",
					"        // 5. Validação completa da estrutura da frase com regex",
					"        pm.test(\"03.05 - Formato completo da mensagem está correto\", function () {",
					"            pm.expect(responseBody).to.match(/^Successfully transferred \\$\\d+ from account #\\d+ to account #\\d+$/);",
					"        });",
					"    }",
					"",
					"};",
					"",
					"customer_info = {",
					"",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'application/xml'\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"        });",
					"",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"03.01 - Response Body must not be null or empty\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"            pm.expect(responseBody.trim().length).to.be.above(0);",
					"        });",
					"",
					"        const customerJson = xml2Json(responseBody);",
					"        const customer = customerJson.customer;",
					"",
					"        // Verifica se os campos principais existem",
					"        pm.test(\"03.02 - Deve conter os campos principais\", function () {",
					"            pm.expect(customer).to.have.property(\"id\");",
					"            pm.expect(customer).to.have.property(\"firstName\");",
					"            pm.expect(customer).to.have.property(\"lastName\");",
					"            pm.expect(customer).to.have.property(\"address\");",
					"            pm.expect(customer).to.have.property(\"phoneNumber\");",
					"            pm.expect(customer).to.have.property(\"ssn\");",
					"        });",
					"",
					"        // Verifica valores esperados",
					"        pm.test(\"03.03 - Nome e Sobrenome\", function () {",
					"            pm.expect(customer.firstName).to.eql(\"John\");",
					"            pm.expect(customer.lastName).to.eql(\"Smith\");",
					"        });",
					"",
					"        // Valida estrutura de endereço",
					"        pm.test(\"03.04 - Endereço completo\", function () {",
					"            const address = customer.address;",
					"            pm.expect(address).to.have.property(\"street\");",
					"            pm.expect(address).to.have.property(\"city\");",
					"            pm.expect(address).to.have.property(\"state\");",
					"            pm.expect(address).to.have.property(\"zipCode\");",
					"        });",
					"",
					"        pm.test(\"03.05 - CEP deve conter 5 dígitos\", function () {",
					"            pm.expect(customer.address.zipCode).to.match(/^\\d{5}$/);",
					"        });",
					"",
					"        // Valida formatos de telefone e SSN",
					"        pm.test(\"03.06 - Telefone e SSN devem estar no formato correto\", function () {",
					"            pm.expect(customer.phoneNumber).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
					"            pm.expect(customer.ssn).to.match(/^\\d{3}-\\d{2}-\\d{4}$/);",
					"        });",
					"    }",
					"};",
					"",
					"account_viewer = {",
					"",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'application/xml'\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"        });",
					"",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"03.01 - Response Body must not be null or empty\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"            pm.expect(responseBody.trim().length).to.be.above(0);",
					"        });",
					"",
					"        // Converte XML para objeto JSON",
					"        const responseJson = xml2Json(responseBody);",
					"        const accounts = responseJson.accounts.account;",
					"",
					"        // Verifica se é um array (vários <account>) ou um único objeto",
					"        const accountList = Array.isArray(accounts) ? accounts : [accounts];",
					"",
					"        pm.test(\"03.02 - A quantidade de contas deve ser um número maior que 0\", function () {",
					"            pm.expect(accountList.length, \"A resposta não contém uma lista válida de contas\").to.be.a(\"number\");",
					"            pm.expect(accountList.length).to.be.above(0);",
					"        });",
					"",
					"        // Verifica se todos os accounts têm os campos esperados",
					"        pm.test(\"03.03 - Todos os accounts devem conter id, customerId, type e balance\", function () {",
					"            accountList.forEach((acc, index) => {",
					"                pm.expect(acc, `Account ${index} está faltando o campo 'id'`).to.have.property('id');",
					"                pm.expect(acc, `Account ${index} está faltando o campo 'customerId'`).to.have.property('customerId');",
					"                pm.expect(acc, `Account ${index} está faltando o campo 'type'`).to.have.property('type');",
					"                pm.expect(acc, `Account ${index} está faltando o campo 'balance'`).to.have.property('balance');",
					"            });",
					"        });",
					"",
					"        // Verifica se todos os customerId são 12212",
					"        pm.test(\"03.04 - Todos os customerId devem ser 12212\", function () {",
					"            accountList.forEach((acc) => {",
					"                pm.expect(acc.customerId).to.eql(\"12212\");",
					"            });",
					"        });",
					"",
					"        // Verifica se há ao menos uma conta do tipo SAVINGS",
					"        pm.test(\"03.05 - Deve conter ao menos uma conta do tipo SAVINGS\", function () {",
					"            const savings = accountList.filter(acc => acc.type === 'SAVINGS');",
					"            pm.expect(savings.length).to.be.greaterThan(0);",
					"        });",
					"",
					"        // Verifica se pelo menos uma conta tem saldo negativo",
					"        pm.test(\"03.06 - Deve conter contas com saldo negativo\", function () {",
					"            const hasNegative = accountList.some(acc => parseFloat(acc.balance) < 0);",
					"            pm.expect(hasNegative).to.be.true;",
					"        });",
					"",
					"        // Verifica se todas as contas têm saldo em número válido",
					"        pm.test(\"03.07 - Todos os balances devem ser valores numéricos válidos\", function () {",
					"            accountList.forEach((acc, index) => {",
					"                const val = parseFloat(acc.balance);",
					"                pm.expect(isNaN(val)).to.be.false;",
					"            });",
					"        });",
					"",
					"        pm.test(\"03.08 - Todos os IDs devem ser únicos\", function () {",
					"            const ids = accounts.map(acc => acc.id);",
					"            const uniqueIds = [...new Set(ids)];",
					"            pm.expect(uniqueIds.length).to.eql(accounts.length);",
					"        });",
					"",
					"        pm.test(\"03.09 - Os IDs devem ser numéricos e estar em ordem crescente\", function () {",
					"            const ids = accounts.map(acc => parseInt(acc.id)).sort((a, b) => a - b);",
					"            for (let i = 1; i < ids.length; i++) {",
					"                pm.expect(ids[i]).to.be.at.least(ids[i - 1], `ID ${ids[i]} não está em ordem crescente`);",
					"            }",
					"        });",
					"",
					"    }",
					"",
					"};",
					"",
					"transaction_info = {",
					"",
					"    status_code: function (status_code, name, resp) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"01.01 - Status code must be \" + status_code, function () {",
					"            pm.response.to.have.status(status_code);",
					"        });",
					"",
					"        pm.test(\"01.02 - Status code name must be \" + name, function () {",
					"            pm.response.to.have.status(name);",
					"        });",
					"",
					"        pm.test(\"01.03 - Response time must be under \" + resp, function () {",
					"            pm.expect(pm.response.responseTime).to.be.below(resp);",
					"        });",
					"    },",
					"",
					"    header: function () {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        pm.test(\"02.01 - Response Header must be Transfer-Encoding  = 'chunked'\", function () {",
					"            pm.expect(pm.response.headers.get('Transfer-Encoding')).to.eql('chunked');",
					"        });",
					"",
					"        pm.test(\"02.02 - Response Header must Content-Type should start with 'application/xml'\", function () {",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');",
					"        });",
					"",
					"    },",
					"",
					"    body: function (responseBody) {",
					"",
					"        if (pm.variables.get(\"skipTests\")) return;",
					"",
					"        // 1. Verifica se o corpo da resposta está presente",
					"        pm.test(\"03.01 - Response Body must not be null or empty\", function () {",
					"            pm.expect(responseBody).to.not.be.null;",
					"            pm.expect(responseBody.trim().length).to.be.above(0);",
					"        });",
					"",
					"        // 2. Converte o XML para JSON",
					"        const json = xml2Json(responseBody);",
					"        const transactions = Array.isArray(json.transactions.transaction)",
					"            ? json.transactions.transaction",
					"            : [json.transactions.transaction]; // garante que seja array",
					"",
					"        // 3. Verifica a quantidade de transações",
					"        pm.test(\"03.02 - Deve conter transações\", function () {",
					"            pm.expect(transactions.length).to.be.above(0);;",
					"        });",
					"",
					"        // 4. Verifica que todas as transações têm os campos obrigatórios",
					"        pm.test(\"03.03 - Todas as transações devem conter id, accountId, type, date, amount e description\", function () {",
					"            transactions.forEach((t, i) => {",
					"                pm.expect(t, `Transação ${i} está incompleta`).to.have.property(\"id\");",
					"                pm.expect(t).to.have.property(\"accountId\");",
					"                pm.expect(t).to.have.property(\"type\");",
					"                pm.expect(t).to.have.property(\"date\");",
					"                pm.expect(t).to.have.property(\"amount\");",
					"                pm.expect(t).to.have.property(\"description\");",
					"            });",
					"        });",
					"",
					"        // 5. Verifica se todas pertencem à conta correta",
					"        pm.test(\"03.04 - Todas as transações devem ser da conta 13122\", function () {",
					"            transactions.forEach((t) => {",
					"                pm.expect(t.accountId).to.eql(\"13122\");",
					"            });",
					"        });",
					"",
					"        // 6. Valida os tipos permitidos",
					"        pm.test(\"03.05 - Tipo deve ser Credit ou Debit\", function () {",
					"            transactions.forEach((t) => {",
					"                pm.expect([\"Credit\", \"Debit\"]).to.include(t.type);",
					"            });",
					"        });",
					"",
					"        // 7. Valida formato da data (YYYY-MM-DDTHH:MM:SS)",
					"        pm.test(\"03.06 - Data deve estar no formato ISO 8601\", function () {",
					"            const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.000Z$/;",
					"            transactions.forEach((t) => {",
					"                pm.expect(t.date).to.match(isoRegex);",
					"            });",
					"        });",
					"",
					"        // 8. Valida que o amount é um número válido",
					"        pm.test(\"03.07 - Amount deve ser um número válido\", function () {",
					"            transactions.forEach((t, i) => {",
					"                const val = parseFloat(t.amount);",
					"                pm.expect(isNaN(val), `Amount inválido na transação ${i}`).to.be.false;",
					"            });",
					"        });",
					"",
					"        // 9. Verifica se há pelo menos uma transação do tipo Debit e uma do tipo Credit",
					"        pm.test(\"03.08 - Deve haver ao menos uma transação de crédito e uma de débito\", function () {",
					"            const types = transactions.map(t => t.type);",
					"            pm.expect(types).to.include(\"Credit\");",
					"            pm.expect(types).to.include(\"Debit\");",
					"        });",
					"",
					"        // 10. Verifica se todos os IDs são únicos",
					"        pm.test(\"03.09 - IDs das transações devem ser únicos\", function () {",
					"            const ids = transactions.map(t => t.id);",
					"            const uniqueIds = [...new Set(ids)];",
					"            pm.expect(uniqueIds.length).to.eql(transactions.length);",
					"        });",
					"    }",
					"};",
					""
				]
			}
		}
	]
}